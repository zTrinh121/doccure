<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.doccure.BE.mapper.DoctorMapper">
  <resultMap id="BaseResultMap" type="com.doccure.BE.model.Doctor">
    <id column="DOCTOR_ID" jdbcType="NUMERIC" property="doctorId" />
    <result column="FIRST_NAME" jdbcType="VARCHAR" property="firstName" />
    <result column="LAST_NAME" jdbcType="VARCHAR" property="lastName" />
    <result column="EXPERIENCE" jdbcType="NUMERIC" property="experience" />
    <result column="HOSPITAL" jdbcType="VARCHAR" property="hospital" />
    <result column="AVATAR" jdbcType="VARCHAR" property="avatar" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    DOCTOR_ID, FIRST_NAME, LAST_NAME, EXPERIENCE, HOSPITAL, AVATAR
  </sql>
  <select id="selectByExample" parameterType="com.doccure.BE.model.DoctorExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from DOCTOR
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from DOCTOR
    where DOCTOR_ID = #{doctorId,jdbcType=NUMERIC}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from DOCTOR
    where DOCTOR_ID = #{doctorId,jdbcType=NUMERIC}
  </delete>
  <delete id="deleteByExample" parameterType="com.doccure.BE.model.DoctorExample">
    delete from DOCTOR
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.doccure.BE.model.Doctor"
  useGeneratedKeys="true" keyProperty="doctorId" keyColumn="DOCTOR_ID">
    insert into DOCTOR (FIRST_NAME, LAST_NAME, EXPERIENCE, HOSPITAL, AVATAR
      )
    values (#{firstName,jdbcType=VARCHAR}, #{lastName,jdbcType=VARCHAR}, 
      #{experience,jdbcType=NUMERIC}, #{hospital,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.doccure.BE.model.Doctor">
    insert into DOCTOR
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="doctorId != null">
        DOCTOR_ID,
      </if>
      <if test="firstName != null">
        FIRST_NAME,
      </if>
      <if test="lastName != null">
        LAST_NAME,
      </if>
      <if test="experience != null">
        EXPERIENCE,
      </if>
      <if test="hospital != null">
        HOSPITAL,
      </if>
      <if test="avatar != null">
        AVATAR,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="doctorId != null">
        #{doctorId,jdbcType=NUMERIC},
      </if>
      <if test="firstName != null">
        #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="lastName != null">
        #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="experience != null">
        #{experience,jdbcType=NUMERIC},
      </if>
      <if test="hospital != null">
        #{hospital,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.doccure.BE.model.DoctorExample" resultType="java.lang.Long">
    select count(*) from DOCTOR
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update DOCTOR
    <set>
      <if test="row.doctorId != null">
        DOCTOR_ID = #{row.doctorId,jdbcType=NUMERIC},
      </if>
      <if test="row.firstName != null">
        FIRST_NAME = #{row.firstName,jdbcType=VARCHAR},
      </if>
      <if test="row.lastName != null">
        LAST_NAME = #{row.lastName,jdbcType=VARCHAR},
      </if>
      <if test="row.experience != null">
        EXPERIENCE = #{row.experience,jdbcType=NUMERIC},
      </if>
      <if test="row.hospital != null">
        HOSPITAL = #{row.hospital,jdbcType=VARCHAR},
      </if>
      <if test="row.avatar != null">
        AVATAR = #{row.avatar,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update DOCTOR
    set DOCTOR_ID = #{row.doctorId,jdbcType=NUMERIC},
      FIRST_NAME = #{row.firstName,jdbcType=VARCHAR},
      LAST_NAME = #{row.lastName,jdbcType=VARCHAR},
      EXPERIENCE = #{row.experience,jdbcType=NUMERIC},
      HOSPITAL = #{row.hospital,jdbcType=VARCHAR},
      AVATAR = #{row.avatar,jdbcType=VARCHAR}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.doccure.BE.model.Doctor">
    update DOCTOR
    <set>
      <if test="firstName != null">
        FIRST_NAME = #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="lastName != null">
        LAST_NAME = #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="experience != null">
        EXPERIENCE = #{experience,jdbcType=NUMERIC},
      </if>
      <if test="hospital != null">
        HOSPITAL = #{hospital,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        AVATAR = #{avatar,jdbcType=VARCHAR},
      </if>
    </set>
    where DOCTOR_ID = #{doctorId,jdbcType=NUMERIC}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.doccure.BE.model.Doctor">
    update DOCTOR
    set FIRST_NAME = #{firstName,jdbcType=VARCHAR},
      LAST_NAME = #{lastName,jdbcType=VARCHAR},
      EXPERIENCE = #{experience,jdbcType=NUMERIC},
      HOSPITAL = #{hospital,jdbcType=VARCHAR},
      AVATAR = #{avatar,jdbcType=VARCHAR}
    where DOCTOR_ID = #{doctorId,jdbcType=NUMERIC}
  </update>

  <resultMap id="BaseResultMapFull" type="com.doccure.BE.model.DoctorFull">
    <id column="DOCTOR_ID" jdbcType="NUMERIC" property="doctorId" />
    <result column="FULL_NAME" jdbcType="VARCHAR" property="fullName" />
    <result column="EXPERIENCE" jdbcType="NUMERIC" property="experience" />
    <result column="HOSPITAL" jdbcType="VARCHAR" property="hospital" />
    <result column="AVATAR" jdbcType="VARCHAR" property="avatar" />

    <collection property="specializations" javaType="List" ofType="com.doccure.BE.model.Specialization">
        <id column="SPECIALIZATION_ID" jdbcType="NUMERIC" property="specializationId" />
      <result column="SPECIALIZATION_NAME" jdbcType="VARCHAR" property="specializationName" />
    </collection>
  </resultMap>

  <select id="getAllDoctorFulls" resultMap="BaseResultMapFull">
   SELECT d.doctor_id,
      d.first_name || ' '||last_name as FULL_NAME,
      d.experience, d.hospital, d.avatar,
      s.*
  FROM doctor d  
  JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id  
  JOIN specialization s ON ds.specialization_id = s.specialization_id
  </select>

  <select id="getDoctorFullById" resultMap="BaseResultMapFull" parameterType="java.lang.Long">
    SELECT d.doctor_id,
      d.first_name || ' '||last_name as FULL_NAME,
      d.experience, d.hospital, d.avatar,
      s.*
    FROM doctor d  
    JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id  
    JOIN specialization s ON ds.specialization_id = s.specialization_id
    WHERE d.doctor_id = #{doctorId,jdbcType=NUMERIC}
  </select>

  <select id="getDoctorFullByKeyword" resultMap="BaseResultMapFull" parameterType="java.lang.String">
      SELECT d.doctor_id,
        d.first_name || ' '||last_name as FULL_NAME,
        d.experience, d.hospital, d.avatar,
        s.*
      FROM doctor d  
      JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id  
      JOIN specialization s ON ds.specialization_id = s.specialization_id
      WHERE UPPER(s.SPECIALIZATION_NAME) LIKE '%' ||  UPPER(#{keyword,jdbcType=VARCHAR}) || '%'
      OR UPPER(d.first_name) LIKE '%' ||  UPPER(#{keyword,jdbcType=VARCHAR}) || '%'
      OR UPPER(d.last_name) LIKE '%' ||  UPPER(#{keyword,jdbcType=VARCHAR}) || '%'
      OR UPPER(d.hospital) LIKE '%' ||  UPPER(#{keyword,jdbcType=VARCHAR}) || '%'
  </select>

  <select id="getDoctorFullBySpecialization" resultMap="BaseResultMapFull" parameterType="java.lang.String">
      SELECT d.doctor_id,
        d.first_name || ' '||last_name as FULL_NAME,
        d.experience, d.hospital, d.avatar,
        s.*
      FROM doctor d  
      JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id  
      JOIN specialization s ON ds.specialization_id = s.specialization_id
      WHERE UPPER(s.SPECIALIZATION_NAME) LIKE '%' ||  UPPER(#{keyword,jdbcType=VARCHAR}) || '%'
  </select>

  <resultMap id="BaseResultMapRating" type="com.doccure.BE.model.DoctorRating">
    <id column="DOCTOR_ID" jdbcType="NUMERIC" property="doctorId" />
    <result column="FULL_NAME" jdbcType="VARCHAR" property="fullName" />
    <result column="EXPERIENCE" jdbcType="NUMERIC" property="experience" />
    <result column="HOSPITAL" jdbcType="VARCHAR" property="hospital" />
    <result column="AVATAR" jdbcType="VARCHAR" property="avatar" />

    <collection property="ratings" javaType="List" ofType="com.doccure.BE.model.RatingSpecialization">
      <id column="RATING_ID" jdbcType="NUMERIC" property="ratingId" />
      <result column="SPECIALIZATION_ID" jdbcType="NUMERIC" property="specializationId" />
      <result column="SPECIALIZATION_NAME" jdbcType="VARCHAR" property="specializationName" />
      <result column="COMMENT_RATING" jdbcType="VARCHAR" property="commentRating" />
      <result column="RATING" jdbcType="NUMERIC" property="rating" />
      <result column="CREATED_AT" jdbcType="TIMESTAMP" property="createdAt" />
      <result column="APPOINTMENT_ID" jdbcType="NUMERIC" property="appointmentId" />
    </collection>
  </resultMap>

  <select id="getAllDoctorRatings" resultMap="BaseResultMapRating">
   SELECT d.doctor_id,
          d.first_name || ' '||last_name as FULL_NAME,
          d.experience, d.hospital, d.avatar, 
          s.specialization_id, s.specialization_name, 
          r.appointment_id, r.rating_id, r.rating, r.comment_rating, r.created_at
    FROM doctor d  
    JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id  
    JOIN specialization s ON ds.specialization_id = s.specialization_id 
    JOIN appointment a ON ds.doctor_specialization_id = a.doctor_specialization_id 
    JOIN rating r ON a.appointment_id = r.appointment_id
    
  </select>

  <select id="getDoctorRatingsById" resultMap="BaseResultMapRating" parameterType="java.lang.Long">
    SELECT d.doctor_id,
          d.first_name || ' '||last_name as FULL_NAME,
          d.experience, d.hospital, d.avatar, 
          s.specialization_id, s.specialization_name,
          r.appointment_id, r.rating_id, r.rating, r.comment_rating, r.created_at
    FROM doctor d  
    JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id  
    JOIN specialization s ON ds.specialization_id = s.specialization_id 
    JOIN appointment a ON ds.doctor_specialization_id = a.doctor_specialization_id
    JOIN rating r ON a.appointment_id = r.appointment_id
        WHERE d.doctor_id = #{doctorId,jdbcType=NUMERIC}
  </select>

  <select id="getDoctorRatingsByStartEndDate" resultMap="BaseResultMapRating">
    SELECT d.doctor_id,
          d.first_name || ' '||last_name as FULL_NAME,
          d.experience, d.hospital, d.avatar, 
          s.specialization_id, s.specialization_name,
          r.appointment_id, r.rating_id, r.rating, r.comment_rating, r.created_at
    FROM doctor d  
    JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id  
    JOIN specialization s ON ds.specialization_id = s.specialization_id 
    JOIN appointment a ON ds.doctor_specialization_id = a.doctor_specialization_id
    JOIN rating r ON a.appointment_id = r.appointment_id
        WHERE d.doctor_id = #{doctorId,jdbcType=NUMERIC}
       <if test="startDate != null and endDate != null">
        AND r.created_at BETWEEN #{startDate, jdbcType=DATE} AND #{endDate, jdbcType=DATE}
        </if>
        <if test="startDate != null and endDate == null">
          <![CDATA[
          AND r.created_at >= #{startDate, jdbcType=DATE}
          ]]>
        </if>
        <if test="startDate == null and endDate != null">
          <![CDATA[
          AND r.created_at <= #{endDate, jdbcType=DATE}
          ]]>
        </if>
  </select>

  <resultMap id="BaseResultMapSlot" type="com.doccure.BE.model.DoctorSlot">
    <id column="DOCTOR_ID" jdbcType="NUMERIC" property="doctorId" />
   <result column="FULL_NAME" jdbcType="VARCHAR" property="fullName" />
    <result column="EXPERIENCE" jdbcType="NUMERIC" property="experience" />
    <result column="HOSPITAL" jdbcType="VARCHAR" property="hospital" />
    <result column="AVATAR" jdbcType="VARCHAR" property="avatar" />

    <collection property="specializations" javaType="List" ofType="com.doccure.BE.model.Specialization">
        <id column="SPECIALIZATION_ID" jdbcType="NUMERIC" property="specializationId" />
        <result column="SPECIALIZATION_NAME" jdbcType="VARCHAR" property="specializationName" />
    </collection>

    <collection property="slots" javaType="List" ofType="com.doccure.BE.model.SlotAppointment">
        <id column="SLOT_ID" jdbcType="NUMERIC" property="slotId" />
        <result column="DATE_SLOT" jdbcType="TIMESTAMP" property="dateSlot" />
        <result column="START_TIME" jdbcType="TIMESTAMP" property="startTime" />
        <result column="END_TIME" jdbcType="TIMESTAMP" property="endTime" />
        <result column="PRICE" jdbcType="NUMERIC" property="price" />
         <result column="STATUS" jdbcType="VARCHAR" property="status" />
    </collection>
  </resultMap>

  

    <select id="getAllDoctorSlots" resultMap="BaseResultMapSlot">
    SELECT
      d.DOCTOR_ID,
      d.first_name || ' '||last_name as FULL_NAME,
      d.EXPERIENCE,
      d.HOSPITAL,
      s.SLOT_ID,
      s.START_DATETIME as DATE_SLOT,
      s.START_DATETIME as START_TIME,
      s.END_DATETIME as END_TIME,
      s.PRICE,
      a.APPOINTMENT_ID,
      a.STATUS AS STATUS,
      ds.SPECIALIZATION_ID,
      sp.SPECIALIZATION_NAME
    FROM
        DOCTOR d
    JOIN
        SLOT s ON d.DOCTOR_ID = s.DOCTOR_ID
    LEFT JOIN
        APPOINTMENT a ON s.SLOT_ID = a.SLOT_ID
    LEFT JOIN
        DOCTOR_SPECIALIZATION ds ON a.DOCTOR_SPECIALIZATION_ID = ds.DOCTOR_SPECIALIZATION_ID
    LEFT JOIN
        SPECIALIZATION sp ON ds.SPECIALIZATION_ID = sp.SPECIALIZATION_ID
      ORDER BY s.START_DATETIME
    </select>

  <select id="getDoctorSlotsById" resultMap="BaseResultMapSlot" parameterType="java.lang.Long">
    SELECT
      d.DOCTOR_ID,
      d.first_name || ' '||last_name as FULL_NAME,
      d.EXPERIENCE,
      d.HOSPITAL,
      s.SLOT_ID,
       s.START_DATETIME as DATE_SLOT,
      s.START_DATETIME as START_TIME,
      s.END_DATETIME as END_TIME,
      s.PRICE,
      a.APPOINTMENT_ID,
      a.STATUS AS STATUS,
      ds.SPECIALIZATION_ID,
      sp.SPECIALIZATION_NAME
    FROM
        DOCTOR d
    JOIN
        SLOT s ON d.DOCTOR_ID = s.DOCTOR_ID
    LEFT JOIN
        APPOINTMENT a ON s.SLOT_ID = a.SLOT_ID
    LEFT JOIN
        DOCTOR_SPECIALIZATION ds ON a.DOCTOR_SPECIALIZATION_ID = ds.DOCTOR_SPECIALIZATION_ID
    LEFT JOIN
        SPECIALIZATION sp ON ds.SPECIALIZATION_ID = sp.SPECIALIZATION_ID
    WHERE d.doctor_id = #{doctorId,jdbcType=NUMERIC}
    ORDER BY s.START_DATETIME
  </select>
</mapper>