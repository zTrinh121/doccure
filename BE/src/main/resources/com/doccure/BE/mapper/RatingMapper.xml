<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.doccure.BE.mapper.RatingMapper">
  <resultMap id="BaseResultMap" type="com.doccure.BE.model.Rating">
    <id column="RATING_ID" jdbcType="NUMERIC" property="ratingId" />
    <result column="COMMENT_RATING" jdbcType="VARCHAR" property="commentRating" />
    <result column="RATING" jdbcType="NUMERIC" property="rating" />
    <result column="CREATED_AT" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="APPOINTMENT_ID" jdbcType="NUMERIC" property="appointmentId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    RATING_ID, COMMENT_RATING, RATING, CREATED_AT, APPOINTMENT_ID
  </sql>
  <select id="selectByExample" parameterType="com.doccure.BE.model.RatingExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from RATING
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from RATING
    where RATING_ID = #{ratingId,jdbcType=NUMERIC}
  </select>
  <select id="selectByAppointmentId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from RATING
    where APPOINTMENT_ID = #{appointmentId,jdbcType=NUMERIC}
  </select>
  <select id="selectByDoctorId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    FROM doctor d
    JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id
    JOIN specialization s ON ds.specialization_id = s.specialization_id
    JOIN appointment a ON ds.doctor_specialization_id = a.doctor_specialization_id
    JOIN rating r ON a.appointment_id = r.appointment_id;
    where DOCTOR_ID = #{doctorId,jdbcType=NUMERIC}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from RATING
    where RATING_ID = #{ratingId,jdbcType=NUMERIC}
  </delete>
  <delete id="deleteByExample" parameterType="com.doccure.BE.model.RatingExample">
    delete from RATING
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.doccure.BE.model.Rating"
  useGeneratedKeys="true" keyProperty="ratingId" keyColumn="RATING_ID">
    insert into RATING (COMMENT_RATING, RATING, CREATED_AT, APPOINTMENT_ID)
    values (#{commentRating,jdbcType=VARCHAR}, #{rating,jdbcType=NUMERIC}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{appointmentId,jdbcType=NUMERIC})
  </insert>
  <insert id="insertSelective" parameterType="com.doccure.BE.model.Rating">
    insert into RATING
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="ratingId != null">
        RATING_ID,
      </if>
      <if test="commentRating != null">
        COMMENT_RATING,
      </if>
      <if test="rating != null">
        RATING,
      </if>
      <if test="createdAt != null">
        CREATED_AT,
      </if>
      <if test="appointmentId != null">
        APPOINTMENT_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="ratingId != null">
        #{ratingId,jdbcType=NUMERIC},
      </if>
      <if test="commentRating != null">
        #{commentRating,jdbcType=VARCHAR},
      </if>
      <if test="rating != null">
        #{rating,jdbcType=NUMERIC},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="appointmentId != null">
        #{appointmentId,jdbcType=NUMERIC},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.doccure.BE.model.RatingExample" resultType="java.lang.Long">
    select count(*) from RATING
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update RATING
    <set>
      <if test="row.ratingId != null">
        RATING_ID = #{row.ratingId,jdbcType=NUMERIC},
      </if>
      <if test="row.commentRating != null">
        COMMENT_RATING = #{row.commentRating,jdbcType=VARCHAR},
      </if>
      <if test="row.rating != null">
        RATING = #{row.rating,jdbcType=NUMERIC},
      </if>
      <if test="row.createdAt != null">
        CREATED_AT = #{row.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="row.appointmentId != null">
        APPOINTMENT_ID = #{row.appointmentId,jdbcType=NUMERIC},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update RATING
    set RATING_ID = #{row.ratingId,jdbcType=NUMERIC},
      COMMENT_RATING = #{row.commentRating,jdbcType=VARCHAR},
      RATING = #{row.rating,jdbcType=NUMERIC},
      CREATED_AT = #{row.createdAt,jdbcType=TIMESTAMP},
      APPOINTMENT_ID = #{row.appointmentId,jdbcType=NUMERIC}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.doccure.BE.model.Rating">
    update RATING
    <set>
      <if test="commentRating != null">
        COMMENT_RATING = #{commentRating,jdbcType=VARCHAR},
      </if>
      <if test="rating != null">
        RATING = #{rating,jdbcType=NUMERIC},
      </if>
      <if test="createdAt != null">
        CREATED_AT = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="appointmentId != null">
        APPOINTMENT_ID = #{appointmentId,jdbcType=NUMERIC},
      </if>
    </set>
    where RATING_ID = #{ratingId,jdbcType=NUMERIC}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.doccure.BE.model.Rating">
    update RATING
    set COMMENT_RATING = #{commentRating,jdbcType=VARCHAR},
      RATING = #{rating,jdbcType=NUMERIC},
      CREATED_AT = #{createdAt,jdbcType=TIMESTAMP},
      APPOINTMENT_ID = #{appointmentId,jdbcType=NUMERIC}
    where RATING_ID = #{ratingId,jdbcType=NUMERIC}
  </update>


  <resultMap id="BaseResultMapRating" type="com.doccure.BE.model.RatingSpecialization">
    <id column="RATING_ID" jdbcType="NUMERIC" property="ratingId" />
    <result column="SPECIALIZATION_ID" jdbcType="NUMERIC" property="specializationId" />
    <result column="SPECIALIZATION_NAME" jdbcType="VARCHAR" property="specializationName" />
    <result column="COMMENT_RATING" jdbcType="VARCHAR" property="commentRating" />
    <result column="RATING" jdbcType="NUMERIC" property="rating" />
    <result column="CREATED_AT" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="APPOINTMENT_ID" jdbcType="NUMERIC" property="appointmentId" />
    <result column="DOCTOR_ID" jdbcType="NUMERIC" property="doctorId" />
  </resultMap>

  <select id="getAllDoctorRatings" resultMap="BaseResultMapRating">
    SELECT d.doctor_id,
           s.specialization_id, s.specialization_name,
           r.appointment_id, r.rating_id, r.rating, r.comment_rating, r.created_at
    FROM doctor d
           JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id
           JOIN specialization s ON ds.specialization_id = s.specialization_id
           JOIN appointment a ON ds.doctor_specialization_id = a.doctor_specialization_id
           JOIN rating r ON a.appointment_id = r.appointment_id
  </select>

  <select id="getDoctorRatingsByDoctorId" resultMap="BaseResultMapRating">
    SELECT d.doctor_id,
           s.specialization_id, s.specialization_name,
           r.appointment_id, r.rating_id, r.rating, r.comment_rating, r.created_at
    FROM doctor d
           JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id
           JOIN specialization s ON ds.specialization_id = s.specialization_id
           JOIN appointment a ON ds.doctor_specialization_id = a.doctor_specialization_id
           JOIN rating r ON a.appointment_id = r.appointment_id
    WHERE d.doctor_id = #{doctorId,jdbcType=NUMERIC}
  </select>

  <select id="getDoctorRatingsByStartEndDate" resultMap="BaseResultMapRating">
    SELECT d.doctor_id,
    s.specialization_id, s.specialization_name,
    r.appointment_id, r.rating_id, r.rating, r.comment_rating, r.created_at
    FROM doctor d
    JOIN doctor_specialization ds ON d.doctor_id = ds.doctor_id
    JOIN specialization s ON ds.specialization_id = s.specialization_id
    JOIN appointment a ON ds.doctor_specialization_id = a.doctor_specialization_id
    JOIN rating r ON a.appointment_id = r.appointment_id
    WHERE d.doctor_id = #{doctorId,jdbcType=NUMERIC}
    <if test="startDate != null and endDate != null">
      AND r.created_at BETWEEN #{startDate, jdbcType=DATE} AND #{endDate, jdbcType=DATE}
    </if>
    <if test="startDate != null and endDate == null">
      <![CDATA[
          AND r.created_at >= #{startDate, jdbcType=DATE}
          ]]>
    </if>
    <if test="startDate == null and endDate != null">
      <![CDATA[
          AND r.created_at <= #{endDate, jdbcType=DATE}
          ]]>
    </if>
  </select>

</mapper>